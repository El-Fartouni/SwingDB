/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.el_fartouni.swingDB.frame;

import fr.el_fartouni.database.utils.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author DAMAR ALI El-Fartouni
 */
public class AuthorInternalFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form AuthorInternalFrame
     */
    public AuthorInternalFrame() {
        initComponents();
        initTable();
    }

    private void initTable() {
        //Récupération du modèle de la jTable
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        //Suppression des lignes existante sur la table
        model.setRowCount(0);

        //Récupération des données depuis la basede données
        //La requete SQL
        String sql = "SELECT * FROM auteurs";

        try {
            //La connexion à la base de données
            Connection cn = DatabaseConnection.getInstance();
            //Le statement
            Statement stm = cn.createStatement();
            //Exécution de la requete
            ResultSet rs = stm.executeQuery(sql);

            //Tableau d'objet qui represente une ligne de la table
            Object[] tableRow;

            //Boucle sur le ResultSet
            while (rs.next()) {
                //Construction du tableau des données
                tableRow = new Object[3];
                tableRow[0] = rs.getObject("id");
                tableRow[1] = rs.getObject("prenom");
                tableRow[2] = rs.getObject("nom");

                //Ajout du tableau dans une nouvelle ligne du modele
                model.addRow(tableRow);
            }
            //Fermeture des objets de connexion
            rs.close();
            stm.close();

        } catch (SQLException ex) {
            Logger.getLogger(AuthorInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        idField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        razButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Gestion des auteurs");

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "prenom", "nom"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel1.setText("id");

        jLabel2.setText("prénom");

        jLabel3.setText("nom");

        updateButton.setText("Mise à jour");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Suppression");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        createButton.setText("Création");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        razButton.setText("RAZ");
        razButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                razButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(firstNameField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deleteButton)
                                    .addComponent(createButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(updateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(razButton)))))
                .addGap(102, 102, 102))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {createButton, deleteButton, razButton, updateButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(updateButton)
                    .addComponent(razButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(deleteButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(createButton))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {createButton, deleteButton, firstNameField, idField, jLabel1, jLabel2, jLabel3, nameField, razButton, updateButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //La ligne sélectionée
        int selectedIndex = jTable1.getSelectedRow();
        //Redefinitioon de l'index  pour obtenir la bonne sémection
        //en cas de tri sur la table
        selectedIndex = jTable1.convertRowIndexToModel(selectedIndex);

        //Récupération du modèle
        TableModel model = jTable1.getModel();

        //Récupération des données de la ligne sélectionnée
        String id = model.getValueAt(selectedIndex, 0).toString();
        String name = model.getValueAt(selectedIndex, 2).toString();
        String firstName = String.valueOf(model.getValueAt(selectedIndex, 1).toString());

        //Si firstName est null
        if (firstName == null) {
            firstName = "";
            
        }
        //Insertion des données dans les TextField
        idField.setText(id);
        nameField.setText(name);
        firstNameField.setText(firstName);
    }//GEN-LAST:event_jTable1MouseClicked

    private void razButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_razButtonActionPerformed
        idField.setText("");
        nameField.setText("");
        firstNameField.setText("");
    }//GEN-LAST:event_razButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        //Recuperation de l'identifiant
        Integer id = Integer.valueOf(idField.getText());

        //Suppression uniquement si l'identifiant n'est pas vide
        if (id > 0) {
            try {
                //Reque SQL de suppression
                String sql = "DELETE FROM auteurs WHERE id=?";
                //Récupération de la connexion
                Connection cn = DatabaseConnection.getInstance();

                PreparedStatement pstm = cn.prepareStatement(sql);

                pstm.setInt(1, id);

                pstm.executeUpdate();

                initTable();
            } catch (SQLException ex) {
                Logger.getLogger(AuthorInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        //Récupération de la saisie
        String name = nameField.getText();
        String firstName = firstNameField.getText();

        //Création uniquement si l'identification n'est pas existant
        if (!name.equals("")) {
            //Transformation de chaine vide en null
            if (firstName.equals("")) {
                firstName = null;
            }

            try {
                // Récupération de la connexion
                Connection cn = DatabaseConnection.getInstance();

                String sql = "INSERT INTO auteurs (nom, prenom) VALUES (?,?)";

                PreparedStatement pstm = cn.prepareStatement(sql);

                pstm.setString(1, name);
                pstm.setString(2, firstName);

                pstm.executeUpdate();

                //Mise à jour de la table
                initTable();

            } catch (SQLException ex) {
                Logger.getLogger(AuthorInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_createButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        //Récupération de la saisie
        String name = nameField.getText();
        String firstName = firstNameField.getText();
        Integer id = Integer.valueOf(idField.getText());

        if (!name.equals("") && id > 0) {
            //Transformation de chaine vide en null
            if (firstName.equals("")) {
                firstName = null;
            }

            try {
                // Récupération de la connexion
                Connection cn = DatabaseConnection.getInstance();

                String sql = "UPDATE auteurs SET nom=?, prenom=? WHERE id=?";

                PreparedStatement pstm = cn.prepareStatement(sql);

                pstm.setString(1, name);
                pstm.setString(2, firstName);
                pstm.setInt(3, id);

                pstm.executeUpdate();

                //Mise à jour de la table
                initTable();

            } catch (SQLException ex) {
                Logger.getLogger(AuthorInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton razButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
